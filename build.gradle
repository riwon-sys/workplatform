
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    // Node Gradle 플러그인 추가
    id "com.github.node-gradle.node" version "7.0.1" // 최신 호환 버전 확인 권장
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // [1] 스프링 웹 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // [2] 롬복 라이브러리
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // [3] MYSQL JDBC 라이브러리
    implementation 'com.mysql:mysql-connector-j'

    // [4] 마이바티스 라이브러리
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'

    // [5] 사용자 정의 AOP 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // [6] webSocket 관련 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-websocket'



    // paging
    implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.4.6'

    // [7] 비크립트 알고리즘 라이브러리
    implementation 'org.springframework.security:spring-security-crypto:6.4.3'


    // JSON 파싱 25-03-24 도하님
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.3'

    // AWS S3
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'

}

tasks.named('test') {
    useJUnitPlatform()
}

// ===================================================
// Node Gradle 플러그인 설정
node {
    version = '18.17.0' // 프로젝트에 맞는 Node.js 버전 지정
    download = true
    npmWorkDir = file("${project.projectDir}/src/main/reactapp") // React 프로젝트 경로
}
// --- React 빌드 관련 Task 정의 ---
// 1. npm install 실행 Task (React 의존성 설치)
task npmInstallReact(type: NpmTask) {
    description = "Install Node.js dependencies from package.json"
    workingDir = file("${project.projectDir}/src/main/reactapp")
    args = ['install']
    inputs.file("src/main/reactapp/package.json")
    inputs.file("src/main/reactapp/package-lock.json")
    outputs.dir("src/main/reactapp/node_modules")
}

// 2. npm run build 실행 Task (React 앱 빌드)
task npmBuildReact(type: NpmTask) {
    description = "Build the React application using npm run build"
    dependsOn npmInstallReact
    workingDir = file("${project.projectDir}/src/main/reactapp")
    args = ['run', 'build']
    inputs.dir("src/main/reactapp/src")
    inputs.dir("src/main/reactapp/public")
    inputs.file("src/main/reactapp/package.json")
    outputs.dir("src/main/reactapp/dist")
}

task copyReactBuild(type: Copy) {
    description = "Copy React build output to Spring Boot static resources"
    dependsOn npmBuildReact
    from "${project.projectDir}/src/main/reactapp/dist"
    into "${project.buildDir}/resources/main/static"
}

processResources {
    dependsOn copyReactBuild
}

clean {
    delete file("${project.projectDir}/src/main/reactapp/node_modules")
    delete file("${project.projectDir}/src/main/reactapp/dist")
}
